package com.daimler.duke.document.jwt.service;

import java.security.Key;
import java.util.UUID;

import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.daimler.duke.document.constant.Constants;
import com.daimler.duke.document.service.DocumentService;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.JwtBuilder;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

/**
 * This JwtAuthService class to verify a JWT token.
 * 
 * @author NAYASAR
 *
 */
@Service
public class JwtAuthService implements IJwtAuthService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DocumentService.class);

    /**
     * This method will verify the token generated by JWT builder.
     */
    @Override
    public Claims verify(final String token) {
        // Claims claims = Jwts.parser().setSigningKey(encodedSecret).parseClaimsJws(token).getBody();
        Claims claims = Jwts.parser()
                            .setSigningKey(DatatypeConverter.parseBase64Binary(Constants.SECRET))
                            .parseClaimsJws(token)
                            .getBody();
        LOGGER.info("JWT token validated successfully");
        return claims;
    }

    /**
     * This method is only for testing. will be removed soon.
     * 
     * @param encodedSecret
     * @return
     */

    private String createJWT() {
        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;
        byte[] apiKeySecretBytes = DatatypeConverter.parseBase64Binary(Constants.SECRET);
        Key signingKey = new SecretKeySpec(apiKeySecretBytes, signatureAlgorithm.getJcaName());

        JwtBuilder builder = Jwts.builder()
                                 .setId(UUID.randomUUID().toString())
                                 .claim("role", Constants.AUTHORIZATION_GROUP)
                                 .signWith(signatureAlgorithm, signingKey);

        return builder.compact();
    }

    /**
     * This method generates JWT Token.
     */
    @Override
    public String issueJwt() {
        return createJWT();
    }
}
